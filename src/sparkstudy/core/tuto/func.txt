1.将函数赋值给变量
2.匿名函数
3.高阶函数
4.高阶函数的类型推断
5.Scala的常用高阶函数
6.闭包
7.SAM转换 (scala高阶函数操作java)
8.Currying函数
9.return

--------------------------------------------------
Scala函数一等公民，可以直接将函数作为值赋值给变量
def sayHello(name: String) {
  println("Hello, " + name)
}
// 赋值语法
val sayHelloFunc = sayHello _
sayHelloFunc("leo")


--------------------------------------------------
匿名函数
// Scala中，函数也可以不需要命名，此时函数被称为匿名函数。
// 可以直接定义函数之后，将函数赋值给某个变量；也可以将直接
定义的匿名函数传入其他函数之中

val sayHelloFunc = (name: String) => println("Hello, " + name)


--------------------------------------------------
高阶函数
Scala中，由于函数是一等公民，因此可以直接将某个函数传入其他函数，作为参数。
这功能是极其强大的，也是Java这种面向对象的编程语言所不具备的
// 接收其他函数作为参数的函数，也被称作高阶函数(higher-order function)

val sayHelloFunc = (name: String) => println("Hello, " + name)
def greeting(func: (String) => Unit, name: String) {
  func(name)
}
greeting(sayHelloFunc, "leo")

Array(1, 2, 3, 4, 5).map((num: Int) => num * num)

// 高阶函数的另外一个功能是将函数作为返回值
def getGreetingFunc(msg: String) = (name: String) => println(msg + "," + name)
val greetingFunc = getGreetingFunc("hello")
greetingFunc("leo")

--------------------------------------------------
高阶函数的类型推断
// 高阶函数可以自动推断出参数类型，而不需要写明类型；而且对于只有一个参数
的函数，还可以省去其小括号；如果仅有的一个参数在右侧的函数体内只使用一次
则还可以将接收参数省略，并且将参数用 _ 来替代

def greeting(func: (String) => Unit, name: String) {
  func(name)
}
greeting(name: String) => println("Hello, " + name), "leo")
greeting((name) => println("Hello, " + name), "leo")
greeting(name => println("Hello, " + name), "leo")

def triple(func: (Int) => Int) = {func(3)}
triple(3 * _)


--------------------------------------------------
Scala的常用高阶函数
// map
Array(1, 2, 3, 4).map(2 * _)

// foreach
(1 to 9).map("*" * _).foreach(println)

// filter
(1 to 20).filter(_ % 2 == 0)

// reduceLeft
(1 to 9).reduceLeft(_ * _)

// sortWith
Array(3, 2, 5, 4, 10, 1).sortWith(_ < _)


--------------------------------------------------
闭包
// 闭包最简洁的解释，函数在变量不处于其有效作用域时，还能够对变量进行访问，即为闭包
def getGreetingFunc(msg: String) = (name: String) => println(msg + "," + name)
val greetingFuncHello = getGreetingFunc("hello")
val greetingFuncHi = getGreetingFunc("hi")

// 两次调用getGreetingFunc函数，传入不同的msg，并创建不同的函数返回
// 然而，msg只是一个局部变量，却在getGreetingFunc执行完之后，还可以继续存在创建的函数之中；
greetingFuncHello("leo")，调用时，值为"hello"的msg被保留在了函数体内部，可以反复的使用
// 这种变量超出了其作用域，还可以使用的情况，即为闭包

// Scala通过为每个函数创建对象来实现闭包，实际上对于getGreetingFunc函数创建的函数，msg是作为函数
对象的变量存在的，因此每个函数才可以拥有不同的msg

// Scala编译器会确保上述闭包机制


--------------------------------------------------
SAM转换
// 在Java中，不支持直接将函数传入一个方法作为参数，通常来说，唯一的办法
就是定义一个实现了某个接口的类的实例对象，该对象只有一个方法；而这些接口都
只有单个的抽象方法，也就是single abstract method，简称为SAM

// 由于Scala是可以调用Java的代码的，因此当我们调用Java的某个方法时，可能就
不得不创建SAM传递给方法，非常麻烦；但是Scala又是支持直接传递函数的。此时就可以
使用Scala提供的，在调用Java方法时，使用的功能，SAM转换，即将SAM转换为Scala函数

// 要使用SAM转换，需要使用Scala提供的特性，隐式转换

import javax.swing._
import java.awt.event._

val button = new JButton("Click")
button.addActionListener(new ActionListener {
  override def actionPerformed(event: ActionEvent) {
    println("Click Me!!!")
  }
})

implicit def getActionListener(actionProcessFunc: (ActionEvent) => Unit) = new ActionListener {
  override def actionPerformed(event: ActionEvent) {
    actionProcessFunc(event)
  }
}

button.addActionListener((event: ActionEvent) => println("Click Me!!!"))