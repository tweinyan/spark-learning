1. Scala的集合体系结构
2. List
3. LinkedList
4. Set
5. 集合的函数式编程
6. 函数式编程案例：统计多个文本内的单词总数

--------------------------------------------------
Scala的集合体系结构
// Scala中的集合体系主要包括：Iterable, Seq, Set, Map。其中
Iterable是所有集合trait的根trait。这个结构与java的集合体系非常相似

// Scala中的集合分成可变和不可变两类集合的，其中可变集合就是，集合的元素可以
动态修改，而不可变集合的元素在初始化之后，就无法修改了。
分别对应scala.collection.mutablehe和scala.collection.immutable两个包

// Seq下包含了Range, ArrayBuffer, List等子trait。其中Range就代表了一个
序列，通常可以使用"1 to 10"这种语法来产生一个Range。
ArrayBuffer类似Java中的ArrayList

--------------------------------------------------
List
// List代表一个不可变的列表
// List的创建，val list = List(1, 2, 3, 5)
// List有head和tail，head代表List的第一个元素，tail代表第一个元素之后的
所有元素，list.head， list.tail
// List有特殊的::操作符，可以用于将head和tail合并成一个List，0::list
// 如果一个List只有一个元素，那么它的head就是这个元素，它的tail是Nil

// 案例：用递归函数来个List中每个元素都加上指定前缀，并打印
def decorator(l: List[Int], prefix: String) {
  if (l != Nil) {
    println(prefix + l.head)
    decorator(l.tail, prefix)
  }
}

--------------------------------------------------
LinkedList

// LinkedList代表一个可变的列表，使用elem可以引用其头部，使用next可以引用其尾部
// val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5); l.elem; l.next

// 案例：使用while循环将列表中的每个元素都乘以2
val list = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5)
var currentList = list
while (currentList != Nil) {
  currentList.elem = currentList.elem * 2
  currentList = currentList.next
}

// 案例：使用while循环将列表中的每隔一个元素就乘以2
val list = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
var currentList = list
var first = true
while (currentList != Nil && currentList.next != Nil) {
  if(first) {
    currentList.elem = currentList.elem * 2
    first = false
  }
  currentList = currentList.next.next
  currentList.elem = currentList.elem * 2
}

--------------------------------------------------
Set
// Set代表一个没有重复元素的集合
// val s = Set(1, 2, 3); s + 1; s + 4
// Set不保证超如顺序
val s = new scala.collection.mutable.HashSet[Int](); s += 1; s += 2; s += 5

// LinkedHashSet会用一个链表维护插入顺序，
val s = new scala.collection.mutable.LinkedHashSet[Int](); i += 1; s += 2; s += 5

// SortedSet会自动根据key来进行排序，
val s = scala.collection.mutable.SortedSet("orange", "apple", "banana")

--------------------------------------------------
集合的函数式编程
必需完全掌握和理解Scala的高阶函数：
map, flatMap, reduce, reduceLeft, foreach等

// map案例实战：为List中每个元素都添加一个前缀
List("Leo", "Jen", "Peter", "Jack").map("name is " + _)

// flatMap: 将List中的多行句子拆分成单词
List("Hello World", "You Me").flatMap(_.split(" "))

// foreach：打印List中的每个单词
List("I", "have", "a", "beautiful", "house").foreach(println)

// zip：对学生姓名和学生成绩进行关联
List("Leo", "Jen", "Peter", "Jack").zip(List(100, 90, 75, 83))


--------------------------------------------------
综合案例：统计多个文本内的单词总数
val lines01 = scala.io.Source.fromFile("/Users/tweinyan/IdeaProjects/sparktest/src/sparkstudy/core/tuto/test01.txt").mkString
val lines02 = scala.io.Source.fromFile("/Users/tweinyan/IdeaProjects/sparktest/src/sparkstudy/core/tuto/test02.txt").mkString
val lines = List(lines01, lines02)
lines.flatMap(_.split(" ")).map((_, 1)).map(_._2).reduceLeft(_ + _)



